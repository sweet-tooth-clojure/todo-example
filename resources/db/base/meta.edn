{:sweet-tooth.todo-example/base-meta-schema
 {:txes [[{:db/ident :meta/owner
           :db/id #db/id[:db.part/db]
           :db/valueType :db.type/ref
           :db/cardinality :db.cardinality/one
           :db/doc "General author attribute"
           :db.install/_attribute :db.part/db}

          {:db/ident :meta/created-at
           :db/id #db/id[:db.part/db]
           :db/valueType :db.type/instant
           :db/cardinality :db.cardinality/one
           :db/doc "When the ent was created"
           :db.install/_attribute :db.part/db}

          {:db/ident :meta/updated-at
           :db/id #db/id[:db.part/db]
           :db/valueType :db.type/instant
           :db/cardinality :db.cardinality/one
           :db/doc "When the ent was updated"
           :db.install/_attribute :db.part/db}

          {:db/ident :meta/deleted-at
           :db/id #db/id[:db.part/db]
           :db/valueType :db.type/instant
           :db/cardinality :db.cardinality/one
           :db/doc "Whether the content is deleted"
           :db.install/_attribute :db.part/db}

          {:db/ident :meta/deleted-by
           :db/id #db/id[:db.part/db]
           :db/valueType :db.type/ref
           :db/cardinality :db.cardinality/one
           :db.install/_attribute :db.part/db}

          {:db/ident :meta/undelete
           :db/id #db/id[:db.part/user]
           :db/doc "Function to undelete something"
           :db/fn #db/fn
           {:lang "clojure"
            :params [db id]
            :code (let [ent (d/entity db id)]
                    [[:db/retract id :meta/deleted-at (:meta/deleted-at ent)]
                     [:db/retract id :meta/deleted-by (:db/id (:meta/deleted-by ent))]])}}]]}}
